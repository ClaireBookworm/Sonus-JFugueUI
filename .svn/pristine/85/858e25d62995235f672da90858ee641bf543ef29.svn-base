package Projekt.Frame;

import com.sun.tools.javac.comp.Flow;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Array;

public class SongPanel extends JPanel
{
    //PANELS
    private JPanel displayPanel;
    private JScrollPane scrollPane;
    private JPanel contentPanel;
    //GRID
    private Grid grid;
    //SCROLL
    private JScrollPane scroll;
    //SOUND COUNTER PER ROW
    private int channel1;
    private int channel2;
    private int channel3;
    private int channel4;
    private int channel5;
    private int channel6;
    private int channel7;
    //LAYOUT
    private GridBagLayout displayLayout;
    private GridBagConstraints layoutConstraintsSong;
    private GridBagLayout gridLayout;
    private GridBagConstraints gridC;
    //INSTRUMENT COLOR
    private final Color guitarColor = Color.BLACK;
    private final Color saxColor = Color.RED;
    private final Color drumsColor = Color.BLUE;
    private final Color bassColor = Color.YELLOW;
    private final Color pianoColor = Color.PINK;
    private final Color miscColor = Color.GREEN;
    private final Color swagColor = Color.ORANGE;
    private final Color horseColor = Color.LIGHT_GRAY;

    //Constructor
    public SongPanel()
    {
        makeDisplayPanel();
        makeGrid();
        makeContentPanel();
        this.add(contentPanel, layoutConstraintsSong);

    }

    //Methods

    //Draws rectangles representing the added sound
    public void addRectangle(int channel, String instrument){
        switch (instrument){
            case "Guitar":
                grid.fillCell(getSoundCountPerRow(channel), channel-1, guitarColor);
                break;
            case "Sax":
                grid.fillCell(getSoundCountPerRow(channel), channel-1, saxColor);
                break;
            case "Drums":
                grid.fillCell(getSoundCountPerRow(channel), channel-1, drumsColor);
                break;
            case "Bass":
                grid.fillCell(getSoundCountPerRow(channel), channel-1, bassColor);
                break;
            case "Piano":
                grid.fillCell(getSoundCountPerRow(channel), channel-1, pianoColor);
                break;
            case "Misc":
                grid.fillCell(getSoundCountPerRow(channel), channel-1, miscColor);
                break;

        }

    }
    public int getSoundCountPerRow(int channel){
        switch (channel){
            case 1:
                channel1 += 1;
                return channel1-1;
            case 2:
                channel2 +=1;
                return channel2-1;
            case 3:
                channel3 +=1;
                return channel3-1;
            case 4:
                channel4 +=1;
                return channel4-1;
            case 5:
                channel5 +=1;
                return channel5-1;
            case 6:
                channel6 +=1;
                return channel6-1;
            case 7:
                channel7 +=1;
                return channel7-1;
        }
        return 0;
    }

    private void makeContentPanel(){

        scrollPane = new JScrollPane(displayPanel);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        scrollPane.setBounds(0, 0, 700, 430);
        contentPanel = new JPanel(null);
        contentPanel.setPreferredSize(new Dimension(700, 430));
        contentPanel.add(scrollPane);
    }

    private void makeDisplayPanel(){

        displayLayout = new GridBagLayout();
        layoutConstraintsSong = new GridBagConstraints();

        displayPanel = new JPanel();
        setLayout(displayLayout);
        layoutConstraintsSong.weightx = 1;
        layoutConstraintsSong.gridx = 0;
        layoutConstraintsSong.gridy = 0;
        layoutConstraintsSong.fill = GridBagConstraints.BOTH;

        gridLayout = new GridBagLayout();
        gridC = new GridBagConstraints();
        displayPanel.setLayout(gridLayout);

    }

    private void makeGrid(){
        grid = new Grid();
        setLayout(gridLayout);
        gridC.gridx = 0;
        gridC.gridy = 0;
        gridC.ipadx = 2800;
        gridC.ipady = 411;
        gridC.fill = GridBagConstraints.BOTH;
        displayPanel.add(grid, gridC);
    }
}
