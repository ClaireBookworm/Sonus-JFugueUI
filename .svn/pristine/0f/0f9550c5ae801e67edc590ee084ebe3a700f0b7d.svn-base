package Projekt.Frame;


import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;

/*
 * Creates the left-most panel which contains the instruments and its corresponding popup-windows in which the sound is created
 * and edited. The instrument buttons triggers the popup windows and the InstrumentPopupFactory takes a string which
 * defines what type of popup window is created. When calling on the popup factory it passes the grabbers needed to
 * make sure the rest of the application knows what is created and edited in the popup window.
 * We decided to use the Singleton design pattern to ensure that only one instance of the InstrumentPanel is created.
 *
 */


final class InstrumentPanel extends JPanel
{
    //SINGLETON
    private static volatile InstrumentPanel instance = null;
    //CONSTANTS
    private static final int BUTTON_PADDING_X = 45;
    private static final int BUTTON_PADDING_Y = 45;
    //COLOR
    private final Color buttonBackground = Color.WHITE;
    //SOUND GRABBER
    private SoundGrabber soundGrabber;
    //GRID GRABBER
    private RectangleGrabber rectangleGrabber;
    // INSTRUMENT POPUP FACTORY
    private InstrumentPopupFactory popupFactory;
    // INSTRUMENT COLOR FOR DRUMS
    private final Color drumsColor = new Color(205,198,115);
    //MAINFRAME
    MainFrame mainFrame;

    public static InstrumentPanel getInstance(MainFrame main) {
        if (instance == null) {
            synchronized (InstrumentPanel.class) {
                if (instance == null) {
                    instance = new InstrumentPanel(main);
                }
            }
        }
        return instance;
    }

    //Constructor
    private InstrumentPanel(MainFrame main){
        mainFrame = main;
        popupFactory = new InstrumentPopupFactory();
        gridMaker();
    }


    // Makes the grid, buttons and actions for iPanel
    void gridMaker()
    {

        this.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();

        JButton guitar = new JButton();
        try {
            Image img = ImageIO.read(getClass().getResource("guitar.png"));
            guitar.setIcon(new ImageIcon(img));
        } catch (IOException ex) {
            System.out.println("Guitar icon error");
        }
        guitar.setBackground(buttonBackground);
        c.fill = GridBagConstraints.BOTH;
        c.ipady = BUTTON_PADDING_Y;
        c.ipadx = BUTTON_PADDING_X;
        c.gridx = 0;
        c.gridy = 0;
        this.add(guitar, c);

        guitar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popupFactory.makeInstrumentPopup("Guitar", soundGrabber, rectangleGrabber);
                mainFrame.clearDirectoryList();
            }
        });


        JButton saxophone = new JButton();
        try {
            Image img = ImageIO.read(getClass().getResource("saxophone.png"));
            saxophone.setIcon(new ImageIcon(img));
        } catch (IOException ex) {System.out.println("Sax icon error");
        }
        saxophone.setBackground(buttonBackground);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        c.gridy = 0;
        this.add(saxophone, c);

        saxophone.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popupFactory.makeInstrumentPopup("Sax", soundGrabber, rectangleGrabber);
                mainFrame.clearDirectoryList();
            }
        });

        final JButton drums = new JButton();
        try {
            Image img = ImageIO.read(getClass().getResource("drums.png"));
            drums.setIcon(new ImageIcon(img));
        } catch (IOException ex) {System.out.println("Drum icon error");
        }
        drums.setBackground(buttonBackground);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 1;
        this.add(drums, c);

        drums.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new DrumPopup(soundGrabber, rectangleGrabber, drumsColor);
                mainFrame.clearDirectoryList();
            }
        });


        JButton bass = new JButton();
        try {
            Image img = ImageIO.read(getClass().getResource("bass.png"));
            bass.setIcon(new ImageIcon(img));
        } catch (IOException ex) {System.out.println("Bass icon error");
        }
        bass.setBackground(buttonBackground);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        c.gridy = 1;
        this.add(bass, c);

        bass.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popupFactory.makeInstrumentPopup("Bass", soundGrabber, rectangleGrabber);
                mainFrame.clearDirectoryList();
            }
        });


        JButton piano = new JButton();
        try {
            Image img = ImageIO.read(getClass().getResource("piano.png"));
            piano.setIcon(new ImageIcon(img));
        } catch (IOException ex) {System.out.println("Piano icon error");
        }
        piano.setBackground(buttonBackground);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 2;
        this.add(piano, c);

        piano.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popupFactory.makeInstrumentPopup("Piano", soundGrabber, rectangleGrabber);
                mainFrame.clearDirectoryList();
            }
        });



        JButton misc = new JButton();
        try {
            Image img = ImageIO.read(getClass().getResource("note.png"));
            misc.setIcon(new ImageIcon(img));
        } catch (IOException ex) {System.out.println("Misc icon error");
        }
        misc.setBackground(buttonBackground);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        c.gridy = 2;
        this.add(misc, c);

        misc.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popupFactory.makeInstrumentPopup("Misc", soundGrabber, rectangleGrabber);
                mainFrame.clearDirectoryList();
            }
        });



        JButton swag = new JButton();
        try {
            Image img = ImageIO.read(getClass().getResource("swag.png"));
            swag.setIcon(new ImageIcon(img));
        } catch (IOException ex) {System.out.println("Swag icon error");
        }
        swag.setBackground(buttonBackground);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 3;
        this.add(swag, c);

        swag.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popupFactory.makeInstrumentPopup("Swag", soundGrabber, rectangleGrabber);
                mainFrame.clearDirectoryList();
            }
        });



        JButton horse = new JButton();
        try {
            Image img = ImageIO.read(getClass().getResource("horse.png"));
            horse.setIcon(new ImageIcon(img));
        } catch (IOException ex) {System.out.println("Horse icon error");
        }
        horse.setBackground(buttonBackground);
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 1;
        c.gridy = 3;
        this.add(horse, c);

        horse.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                popupFactory.makeInstrumentPopup("Horse", soundGrabber, rectangleGrabber);
                mainFrame.clearDirectoryList();
            }
        });

        this.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                mainFrame.clearDirectoryList();
            }
            @Override
            public void mousePressed(MouseEvent e) {
            }
            @Override
            public void mouseReleased(MouseEvent e) {
            }
            @Override
            public void mouseEntered(MouseEvent e) {
            }
            @Override
            public void mouseExited(MouseEvent e) {
            }
        });

    }

    public void setSoundGrabber(SoundGrabber soundGrabber) {
        this.soundGrabber = soundGrabber;
    }
    public void setRectangleGrabber(RectangleGrabber rectangleGrabber) {
        this.rectangleGrabber = rectangleGrabber;
    }


}
