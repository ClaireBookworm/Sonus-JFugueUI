package Projekt.frame;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.*;
import java.util.List;

/*
 * This panel is created in the DisplayPanel and handles the creation of the grid located in the center of the application.
 * When a new object is created it sends the added information to the gridGrabber so that the information is accessable
 * when the user decides to save the project. The GridObserver is implemented so that it knows when the user loads
 * a saved project and can draw the saved object in the grid.
 */



final class Grid extends JPanel implements GridObserver{

    private List<Point> fillCells;
    private List<Color> cellColor;
    private List<String> icons;
    private final static int LIST_SIZE = 25;
    private static final Color BORDER_COLOR = Color.WHITE;
    private static final int CELL_WIDTH = 175;
    private static final int CELL_HEIGHT = 60;
    private static final int NUMB_OF_COLUMNS = 20;
    private static final int NUMB_OF_ROWS = 7;
    private static final int GRID_WIDTH = NUMB_OF_COLUMNS * CELL_WIDTH;
    private static final int GRID_HEIGHT = NUMB_OF_ROWS * CELL_HEIGHT;
    //GRID GRABBER
    private GridGrabber gridGrabber;
    //MAINFRAME
    private MainFrame mainFrame;

    public Grid(GridGrabber grabber, MainFrame main) {
        mainFrame = main;
        gridGrabber = grabber;
        fillCells = new ArrayList<>(LIST_SIZE);
        cellColor = new ArrayList<>(LIST_SIZE);
        icons = new ArrayList<>(LIST_SIZE);
        this.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                mainFrame.clearDirectoryList();
            }
            @Override
            public void mousePressed(MouseEvent e) {
            }
            @Override
            public void mouseReleased(MouseEvent e) {
            }
            @Override
            public void mouseEntered(MouseEvent e) {
            }
            @Override
            public void mouseExited(MouseEvent e) {
            }
        });

    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int colorListIndex = 0;
        int iconListIndex = 0;
        for (Point fillCell : fillCells) {
            int cellX = (fillCell.x * CELL_WIDTH);
            int cellY = (fillCell.y * CELL_HEIGHT);

            g.setColor(cellColor.get(colorListIndex));
            g.fillRect(cellX + 1, cellY + 7, CELL_WIDTH - 2, CELL_HEIGHT - 14);
            g.fillRect(cellX + 7, cellY + 1, CELL_WIDTH - 14, CELL_HEIGHT - 2);

            g.fillOval(cellX + 1, cellY + 1, 10, 10);
            g.fillOval(cellX + CELL_WIDTH - 12, cellY + 1, 10, 10);
            g.fillOval(cellX + 1, cellY + CELL_HEIGHT - 12, 10, 10);
            g.fillOval(cellX + CELL_WIDTH - 12, cellY + CELL_HEIGHT - 12, 10, 10);


            //For the border
            g.setColor(BORDER_COLOR);
            g.fillRect(cellX + 5, cellY + 5, CELL_WIDTH - 10, CELL_HEIGHT - 10);

            g.setColor(cellColor.get(colorListIndex));
            g.fillRect(cellX+6, cellY+6, CELL_WIDTH-12,CELL_HEIGHT-12);
            g.fillRect(cellX+15, cellY+3, CELL_WIDTH-30, CELL_HEIGHT-6);


            try {
                Image img = ImageIO.read(getClass().getResource(icons.get(iconListIndex)));
                g.drawImage(img, cellX + CELL_WIDTH/2 - img.getWidth(null)/2, cellY + 3 + CELL_HEIGHT/2 - img.getHeight(null)/2,50,50,null);
            } catch (IOException ex) {
                System.out.println("Icon Error");
            }

            iconListIndex += 1;
            colorListIndex += 1;
        }
        g.setColor(Color.LIGHT_GRAY);
        g.drawRect(0, 0, GRID_WIDTH, GRID_HEIGHT);

        for (int i = 0; i <= GRID_WIDTH; i += CELL_WIDTH) {
            g.drawLine(i, 0, i, GRID_HEIGHT);
        }

        for (int i = 0; i <= GRID_HEIGHT; i += CELL_HEIGHT) {
            g.drawLine(0, i, GRID_WIDTH, i);
        }
    }

    public void fillCell(int channel, Color color, String icon){
        fillCells.add(new Point(getSoundCountPerRow(channel), channel - 1));
        gridGrabber.setFillCells(fillCells);
        cellColor.add(color);
        gridGrabber.setCellColor(cellColor);
        icons.add(icon);
        gridGrabber.setIcons(icons);
        repaint();
    }

    @Override
    public void update(List<Point> fillCells, List<Color> cellColor, List<String> icons) {
        this.fillCells = fillCells;
        this.cellColor = cellColor;
        this.icons = icons;
        repaint();
    }

    public void registerGridListener(GridListener gridListener) {
        gridListener.register(this);
    }

    int getSoundCountPerRow(int channel){
        switch (channel){
            case 1:
                gridGrabber.setChannelCount1(gridGrabber.getChannelCount1()+1);
                return gridGrabber.getChannelCount1()-1;
            case 2:
                gridGrabber.setChannelCount2(gridGrabber.getChannelCount2()+1);
                return gridGrabber.getChannelCount2()-1;
            case 3:
                gridGrabber.setChannelCount3(gridGrabber.getChannelCount3()+1);
                return gridGrabber.getChannelCount3()-1;
            case 4:
                gridGrabber.setChannelCount4(gridGrabber.getChannelCount4()+1);
                return gridGrabber.getChannelCount4()-1;
            case 5:
                gridGrabber.setChannelCount5(gridGrabber.getChannelCount5()+1);
                return gridGrabber.getChannelCount5()-1;
            case 6:
                gridGrabber.setChannelCount6(gridGrabber.getChannelCount6()+1);
                return gridGrabber.getChannelCount6()-1;
            case 7:
                gridGrabber.setChannelCount7(gridGrabber.getChannelCount7()+1);
                return gridGrabber.getChannelCount7()-1;
        }
        return 0;
    }
}