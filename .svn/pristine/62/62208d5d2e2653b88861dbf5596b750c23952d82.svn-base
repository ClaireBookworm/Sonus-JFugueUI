package Projekt.Frame;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.jfugue.*;


public class InstrumentPopup extends JFrame
{
    //INSTRUMENT IDENTIFIER
    private String instrumentID;
    //LAYOUTS
    private GridBagLayout upperPanelLayout, lowerPanelLayout, popupLayout, iPanelLayout, midPanelLayout, aPanelLayout, durationPanelLayout, rightPanelLayout;
    private GridBagConstraints upperC, lowerC, popupC, midC, instrumentC, ackordC, durationC, rightC;
    //PANELS
    private JPanel instrumentPanel, midPanel, ackordPanel, durationPanel, rightPanel, upperPanel, lowerPanel;
    //COLOR
    private Color backGroundColor = new Color(240, 240, 240);
    private Color buttonBackground = Color.WHITE;
    private Color borderColor = Color.WHITE;
    //CONSTANTS
    private int LINE_LENGTH = 400;
    private int INSTRUMENT_BUTTON_X = 40;
    private int INSTRUMENT_BUTTON_Y = 39;
    private int ACKORD_BUTTON_X = 10;
    private int ACKORD_BUTTON_Y = 10;
    private int DURATION_BUTTON_X = 10;
    private int DURATION_BUTTON_Y = 10;
    private int VOL_MAX = 10;
    private int VOL_LOW = 0;
    private int VOL_INIT = 5;
    private int CHANNEL_LOW = 1;
    private int CHANNEL_MAX = 6;
    private int CHANNEL_INIT = 1;
    private int SLIDER_X = 20;
    private int SLIDER_Y = 20;
    private int RIGHT_BUTTON_X = 20;
    private int RIGHT_BUTTON_Y = 20;
    //BUTTONS
    private JButton instrument1, instrument2, instrument3, instrument4, instrument5;
    private JButton a, b, c, d, e, f, g;
    private JButton minor, major, sharp;
    private JButton whole, half, quarter, eighth;
    private JButton play, add, clear;
    //SLIDERS
    private JSlider volume, channel;
    //SLIDER LABELS
    private JLabel volumeLabel, channelLabel;
    //LIST WITH BUTTONS
    private JButton[] instrumentButtons;
    private JButton[] ackordButtons;
    private JButton[] durationButtons;
    private JButton[] rightButtons;
    //LIST WITH SLIDERS
    private JSlider[] rightSliders;
    //LIST WITH LABELS
    private JLabel[] sliderLabels;
    //INSTRUMENT LISTS
    private String[] guitarList, saxList, drumList, bassList, pianoList, miscList;
    //LOWER TEXT AREA
    private JTextField textField;
    //PLAYER
    private Player player;
    private Sound popupSound;

    // INSTRUMENTS

    //Guitar
    private static final String guitar1 = " I[GUITAR] ";
    private static final String guitar2 = " I[NYLON_STRING_GUITAR] ";
    private static final String guitar3 = " I[STEEL_STRING_GUITAR] ";
    private static final String guitar4 = " I[ELECTRIC_JAZZ_GUITAR] ";
    private static final String guitar5 = " I[DISTORTION_GUITAR] ";

    //Saxophone
    private static final String sax1 = " I[SOPRANO_SAX] ";
    private static final String sax2 = " I[ALTO_SAX] ";
    private static final String sax3 = " I[TENOR_SAX] ";
    private static final String sax4 = " I[BARITONE_SAX] ";
    private static final String sax5 = " I[OBOE] ";

    //Bass
    private static final String bass1 = " I[ACOUSTIC_BASS] ";
    private static final String bass2 = " I[ELECTRIC_BASS_FINGER] ";
    private static final String bass3 = " I[FRETLESS_BASS] ";
    private static final String bass4 = " I[SLAP_BASS_1] ";
    private static final String bass5 = " I[SYNTH_BASS_1] ";

    //Piano
    private static final String piano1 = " I[PIANO] ";
    private static final String piano2 = " I[ACOUSTIC_GRAND] ";
    private static final String piano3 = " I[BRIGHT_ACOUSTIC] ";
    private static final String piano4 = " I[ELECTRIC_PIANO] ";
    private static final String piano5 = " I[ELECTRIC_PIANO1] ";

    //Misc
    private static final String misc1 = " I[GOBLINS] ";
    private static final String misc2 = " I[GUNSHOT] ";
    private static final String misc3 = " I[SEASHORE] ";
    private static final String misc4 = " I[RAIN] ";
    private static final String misc5 = " I[HELICOPTER] ";



    //Methods
    public InstrumentPopup(String identifier)
    {
        instrumentID = identifier;
        player = new Player();
        popupSound = new Sound();
        panelMaker(getContentPane(), instrumentID);
        instrumentButtons[0].doClick();
        this.setTitle(identifier);
        this.setResizable(false);
        pack();
        this.setVisible(true);

    }

    public void panelMaker(Container pane, String identifier)
    {
        popupLayout = new GridBagLayout();
        pane.setLayout(popupLayout);
        popupC = new GridBagConstraints();

        makeUpperPanel();

        makeInstrumentPanel(identifier);
        upperPanel.add(instrumentPanel, upperC);

        makeMidPanel();
        makeAckordPanel();
        midPanel.add(ackordPanel, midC);
        makeDurationPanel();
        midPanel.add(durationPanel, midC);
        upperPanel.add(midPanel, upperC);

        makeRightPanel();
        upperPanel.add(rightPanel, upperC);

        pane.add(upperPanel, popupC);

        makeLowerPanel();
        pane.add(lowerPanel, popupC);


        addActionListenersToButtons("ackords");
        addActionListenersToButtons("duration");
        addActionListenersToButtons("rightButtons");
        addActionListenersToButtons("instruments");

    }

    private void makeUpperPanel(){
        upperPanel = new JPanel();
        upperPanel.setBackground(backGroundColor);
        setLayout(popupLayout);
        popupC.ipadx = 0;
        popupC.ipady = 0;
        popupC.gridx = 0;
        popupC.gridy = 0;

        upperPanelLayout = new GridBagLayout();
        upperC = new GridBagConstraints();
        upperPanel.setLayout(upperPanelLayout);
    }

    private void makeInstrumentPanel(String identifier){

        Border lineBorder = BorderFactory.createLineBorder(borderColor, 2);
        Border instrumentBorder = BorderFactory.createTitledBorder(lineBorder, "Instruments",2,3);

        instrumentPanel = new JPanel();
        instrumentPanel.setBorder(instrumentBorder);
        instrumentPanel.setBackground(backGroundColor);
        setLayout(upperPanelLayout);
        upperC.ipadx = 0;
        upperC.ipady = 0;
        upperC.gridx = 0;
        upperC.gridy = 0;

        iPanelLayout = new GridBagLayout();
        instrumentC = new GridBagConstraints();
        instrumentPanel.setLayout(iPanelLayout);

        addInstrumentsToLists();


        switch(identifier){

            case("Guitar"):
                makeInstrumentButtons(guitarList);
                System.out.println("Guitar");
                break;
            case("Sax"):
                makeInstrumentButtons(saxList);
                System.out.println("Sax");
                break;
            case("Drums"):
                makeInstrumentButtons(drumList);
                System.out.println("Drums");
                break;
            case("Bass"):
                makeInstrumentButtons(bassList);
                System.out.println("Bass");
                break;
            case("Piano"):
                makeInstrumentButtons(pianoList);
                System.out.println("Piano");
                break;

            case("Misc"):
                makeInstrumentButtons(miscList);
                System.out.println("Misc");
                break;
/*
            case("Swag"):
                makeInstrumentButtons();
                break;
            case("Horse"):
                makeInstrumentButtons();
                System.out.println("Horse");
                break;
                */
        }
    }

    private void addInstrumentsToLists(){

        guitarList = new String[5];
        guitarList[0] = "Ordinary guitar";
        guitarList[1] = "Nylon string guitar";
        guitarList[2] = "Steel string guitar";
        guitarList[3] = "Electric jazz guitar";
        guitarList[4] = "Distortion guitar";


        saxList = new String[5];
        saxList[0] = "Soprano sax";
        saxList[1] = "Alto sax";
        saxList[2] = "Tenor sax";
        saxList[3] = "Baritone sax";
        saxList[4] = "Oboe";

        drumList = new String[5];
        drumList[0] = "D1";
        drumList[1] = "D2";
        drumList[2] = "D3";
        drumList[3] = "D4";
        drumList[4] = "D5";

        bassList = new String[5];
        bassList[0] = "Acoustic bass";
        bassList[1] = "Electric bass";
        bassList[2] = "Fretless bass";
        bassList[3] = "Slap bass";
        bassList[4] = "Synth bass";

        pianoList = new String[5];
        pianoList[0] = "Ordinary Piano";
        pianoList[1] = "Acoustic grand";
        pianoList[2] = "Bright Acoustic";
        pianoList[3] = "Electric Piano 1";
        pianoList[4] = "Electric Piano 2";

        miscList = new String[5];
        miscList[0] = "Goblins";
        miscList[1] = "Gunshot";
        miscList[2] = "Seashore";
        miscList[3] = "Rain";
        miscList[4] = "Helicopter";

    }

    private void makeInstrumentButtons(String [] instrumentList){

        instrument1 = new JButton();
        instrument2 = new JButton();
        instrument3 = new JButton();
        instrument4 = new JButton();
        instrument5 = new JButton();
        instrumentButtons = new JButton[5];
        instrumentButtons[0] = instrument1;
        instrumentButtons[1] = instrument2;
        instrumentButtons[2] = instrument3;
        instrumentButtons[3] = instrument4;
        instrumentButtons[4] = instrument5;

        for(int i = 0; i < instrumentList.length; i++){
            instrumentButtons[i].setText(instrumentList[i]);
            setLayout(iPanelLayout);
            instrumentC.ipadx = INSTRUMENT_BUTTON_X;
            instrumentC.ipady = INSTRUMENT_BUTTON_Y;
            instrumentC.gridx = 0;
            instrumentC.gridy = i;
            instrumentC.fill = GridBagConstraints.BOTH;
            instrumentPanel.add(instrumentButtons[i], instrumentC);
        }

    }

    private void makeMidPanel(){
        midPanel = new JPanel();
        midPanel.setBackground(backGroundColor);
        setLayout(upperPanelLayout);
        upperC.ipadx = 0;
        upperC.ipady = 0;
        upperC.gridx = 1;
        upperC.gridy = 0;
        upperC.fill = GridBagConstraints.BOTH;

        midPanelLayout = new GridBagLayout();
        midC = new GridBagConstraints();
        midPanel.setLayout(midPanelLayout);
    }

    private void makeAckordPanel(){

        Border lineBorder = BorderFactory.createLineBorder(borderColor, 2);
        Border ackordBorder = BorderFactory.createTitledBorder(lineBorder, "Ackords",2,3);

        ackordPanel = new JPanel();
        ackordPanel.setBackground(backGroundColor);
        ackordPanel.setBorder(ackordBorder);
        setLayout(midPanelLayout);
        midC.ipadx = 20;
        midC.ipady = 20;
        midC.gridx = 0;
        midC.gridy = 0;
        midC.fill = GridBagConstraints.BOTH;

        aPanelLayout = new GridBagLayout();
        ackordC = new GridBagConstraints();
        ackordPanel.setLayout(aPanelLayout);

        makeAckordButtons();
    }

    private void makeAckordButtons(){

        String[] ackords = new String[10];
        ackords[0] = "A";
        ackords[1] = "B";
        ackords[2] = "C";
        ackords[3] = "D";
        ackords[4] = "E";
        ackords[5] = "F";
        ackords[6] = "G";
        ackords[7] = "Maj";
        ackords[8] = "Min";
        ackords[9] = "#";

        a = new JButton();
        b = new JButton();
        c = new JButton();
        d = new JButton();
        e = new JButton();
        f = new JButton();
        g = new JButton();

        major = new JButton();
        minor = new JButton();
        sharp = new JButton();

        ackordButtons = new JButton[10];
        ackordButtons[0] = a;
        ackordButtons[1] = b;
        ackordButtons[2] = c;
        ackordButtons[3] = d;
        ackordButtons[4] = e;
        ackordButtons[5] = f;
        ackordButtons[6] = g;
        ackordButtons[7] = major;
        ackordButtons[8] = minor;
        ackordButtons[9] = sharp;

        int columnindex = 0;
        int rowindex = 0;
        for (int i = 0; i<ackordButtons.length; i++){
            ackordButtons[i].setText(ackords[i]);
            ackordButtons[i].setBackground(buttonBackground);
            setLayout(aPanelLayout);
            ackordC.gridx = columnindex;
            ackordC.gridy = rowindex;
            ackordC.ipadx = ACKORD_BUTTON_X;
            ackordC.ipady = ACKORD_BUTTON_Y;
            ackordC.fill = GridBagConstraints.BOTH;
            ackordPanel.add(ackordButtons[i], ackordC);

            columnindex = (columnindex < 1  ? columnindex+1: 0);
            if(columnindex==0){rowindex+=1;}
        }

    }

    private void makeDurationPanel(){

        Border lineBorder = BorderFactory.createLineBorder(borderColor, 2);
        Border durationBorder = BorderFactory.createTitledBorder(lineBorder, "Duration",2,3);

        durationPanel = new JPanel();
        durationPanel.setBackground(backGroundColor);
        durationPanel.setBorder(durationBorder);
        setLayout(midPanelLayout);
        midC.ipadx = 20;
        midC.ipady = 20;
        midC.gridx = 0;
        midC.gridy = 1;
        midC.fill = GridBagConstraints.BOTH;

        durationPanelLayout = new GridBagLayout();
        durationC = new GridBagConstraints();
        durationPanel.setLayout(durationPanelLayout);

        makeDurationButtons();
    }

    private void makeDurationButtons(){

        String[] duration = new String[4];
        duration[0] = "Whole";
        duration[1] = "Half";
        duration[2] = "Quarter";
        duration[3] = "Eighth";

        whole = new JButton();
        half = new JButton();
        quarter = new JButton();
        eighth = new JButton();

        durationButtons = new JButton[4];
        durationButtons[0] = whole;
        durationButtons[1] = half;
        durationButtons[2] = quarter;
        durationButtons[3] = eighth;

        int columnIndex = 0;
        int rowIndex = 0;
        for (int i = 0; i<durationButtons.length; i++){
            durationButtons[i].setText(duration[i]);
            durationButtons[i].setBackground(buttonBackground);
            setLayout(durationPanelLayout);
            durationC.gridx = columnIndex;
            durationC.gridy = rowIndex;
            durationC.ipadx = DURATION_BUTTON_X;
            durationC.ipady = DURATION_BUTTON_Y;
            durationC.fill = GridBagConstraints.BOTH;
            durationPanel.add(durationButtons[i], durationC);

            columnIndex = (columnIndex < 1  ? columnIndex+1: 0);
            if(columnIndex==0){rowIndex+=1;}
        }
    }

    private void makeRightPanel(){

        Border lineBorder = BorderFactory.createLineBorder(borderColor, 2);
        Border rightBorder = BorderFactory.createTitledBorder(lineBorder,"",2,3);

        rightPanel = new JPanel();
        rightPanel.setBackground(backGroundColor);
        rightPanel.setBorder(rightBorder);
        setLayout(upperPanelLayout);
        upperC.ipadx = 0;
        upperC.ipady = 0;
        upperC.gridx = 2;
        upperC.gridy = 0;
        upperC.fill = GridBagConstraints.VERTICAL;

        rightPanelLayout = new GridBagLayout();
        rightC = new GridBagConstraints();
        rightPanel.setLayout(rightPanelLayout);

        makeRightSliders();
        makeRightButtons();
    }

    private void makeRightSliders(){

        String[] sliders = new String[2];
        sliders[0] = "Volume";
        sliders[1] = "Channel";

        volumeLabel = new JLabel(sliders[0], JLabel.CENTER);
        volume = new JSlider(JSlider.HORIZONTAL, VOL_LOW, VOL_MAX, VOL_INIT);
        volume.setMajorTickSpacing(VOL_MAX);
        volume.setMinorTickSpacing(VOL_LOW);
        volume.setPaintTicks(true);
        volume.setPaintLabels(true);

        channelLabel = new JLabel(sliders[1], JLabel.CENTER);
        channel = new JSlider(JSlider.HORIZONTAL, CHANNEL_LOW, CHANNEL_MAX, CHANNEL_INIT);
        channel.setMajorTickSpacing(CHANNEL_MAX);
        channel.setMinorTickSpacing(CHANNEL_LOW);
        channel.setPaintTicks(true);
        channel.setPaintLabels(true);

        sliderLabels = new JLabel[2];
        sliderLabels[0] = volumeLabel;
        sliderLabels[1] = channelLabel;

        rightSliders = new JSlider[2];
        rightSliders[0] = volume;
        rightSliders[1] = channel;

        int y = 0;
        for (int i = 0; i<rightSliders.length; i++){
            sliderLabels[i].setAlignmentX(Component.CENTER_ALIGNMENT);
            setLayout(rightPanelLayout);
            rightC.gridx = 0;
            rightC.gridy = y;
            rightC.fill = GridBagConstraints.BOTH;
            rightPanel.add(sliderLabels[i], rightC);
            y+=1;

            rightSliders[i].setBackground(buttonBackground);
            setLayout(rightPanelLayout);
            rightC.gridx = 0;
            rightC.gridy = y;
            rightC.ipadx = SLIDER_X;
            rightC.ipady = SLIDER_Y;
            rightC.fill = GridBagConstraints.BOTH;
            rightPanel.add(rightSliders[i], rightC);
            y+=1;

        }


    }

    private void makeRightButtons(){
        String[] buttons = new String[3];
        buttons[0] = "Play";
        buttons[1] = "Add";
        buttons[2] = "Clear";

        play = new JButton();
        add = new JButton();
        clear = new JButton();

        rightButtons = new JButton[3];
        rightButtons[0] = play;
        rightButtons[1] = add;
        rightButtons[2] = clear;

        for (int i = 0; i<rightButtons.length; i++){
            rightButtons[i].setText(buttons[i]);
            rightButtons[i].setBackground(buttonBackground);
            setLayout(rightPanelLayout);
            rightC.gridx = 0;
            rightC.gridy = sliderLabels.length + rightSliders.length + i;
            rightC.ipadx = RIGHT_BUTTON_X;
            rightC.ipady = RIGHT_BUTTON_Y;
            rightC.fill = GridBagConstraints.BOTH;
            rightPanel.add(rightButtons[i], rightC);
        }
    }

    private void makeLowerPanel(){
        Border lineBorder = BorderFactory.createLineBorder(borderColor, 2);
        Border lowerBorder = BorderFactory.createTitledBorder(lineBorder,"",2,3);

        lowerPanel = new JPanel();
        lowerPanel.setBackground(backGroundColor);
        lowerPanel.setBorder(lowerBorder);
        setLayout(popupLayout);
        popupC.ipadx = 0;
        popupC.ipady = 0;
        popupC.gridx = 0;
        popupC.gridy = 1;

        lowerPanelLayout = new GridBagLayout();
        lowerC = new GridBagConstraints();
        lowerPanel.setLayout(lowerPanelLayout);

        makeLowerTextArea();
    }

    private void makeLowerTextArea(){
        textField = new JTextField(50);
        textField.setEditable(false);
        setLayout(lowerPanelLayout);
        lowerC.gridx = 0;
        lowerC.gridy = 0;
        lowerC.ipadx = 20;
        lowerC.ipady = 20;
        lowerC.fill = GridBagConstraints.HORIZONTAL;
        lowerPanel.add(textField, lowerC);
    }

    private void addActionListenersToButtons(String identifier){

        String[] ackordStrings = new String[ackordButtons.length];
        ackordStrings[0] = " A";
        ackordStrings[1] = " B";
        ackordStrings[2] = " C";
        ackordStrings[3] = " D";
        ackordStrings[4] = " E";
        ackordStrings[5] = " F";
        ackordStrings[6] = " G";
        ackordStrings[7] = "maj";
        ackordStrings[8] = "min";
        ackordStrings[9] = "#";

        String[] durationStrings = new String[durationButtons.length];
        durationStrings[0] = "w";
        durationStrings[1] = "h";
        durationStrings[2] = "q";
        durationStrings[3] = "e";


        switch(identifier){
            case "instruments":
                setListeners(instrumentButtons, identifyInstrument());
                break;
            case "ackords":
                setListeners(ackordButtons, ackordStrings);
                break;
            case "duration":
                setListeners(durationButtons, durationStrings);
                break;
            case "rightButtons":
                play.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        int v = volume.getValue();
                        popupSound.insertVolume(v);
                        player.play(popupSound);
                    }
                });
                clear.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        popupSound = new Sound();
                        textField.setText("");
                        instrumentButtons[0].doClick();
                    }
                });
                add.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        int c = channel.getValue();
                        popupSound.insertChannel(c);
                        player.play(popupSound);
                    }
                });
                break;
        }
    }

    private String[] identifyInstrument(){
        String[] instrumentList = new String[instrumentButtons.length];
        switch(instrumentID){
            case("Guitar"):
                instrumentList[0] = guitar1;
                instrumentList[1] = guitar2;
                instrumentList[2] = guitar3;
                instrumentList[3] = guitar4;
                instrumentList[4] = guitar5;
                return instrumentList;
            case("Sax"):
                instrumentList[0] = sax1;
                instrumentList[1] = sax2;
                instrumentList[2] = sax3;
                instrumentList[3] = sax4;
                instrumentList[4] = sax5;
                return instrumentList;
            case("Bass"):
                instrumentList[0] = bass1;
                instrumentList[1] = bass2;
                instrumentList[2] = bass3;
                instrumentList[3] = bass4;
                instrumentList[4] = bass5;
                return instrumentList;

            case("Piano"):
                instrumentList[0] = piano1;
                instrumentList[1] = piano2;
                instrumentList[2] = piano3;
                instrumentList[3] = piano4;
                instrumentList[4] = piano5;
                return instrumentList;

            case("Misc"):
                instrumentList[0] = misc1;
                instrumentList[1] = misc2;
                instrumentList[2] = misc3;
                instrumentList[3] = misc4;
                instrumentList[4] = misc5;
                return instrumentList;

        }
        return null;

    }

    private void setListeners(JButton[] buttonList, String[] musicString){
        for(int i = 0; i<buttonList.length;i++){
            final String sound = musicString[i];
            buttonList[i].addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    popupSound.addMusicToMusicstring(channel.toString(), sound);
                    textField.setText(textField.getText() + sound);
                }
            });
        }

    }
}
