package Projekt.Frame;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.util.*;
import java.util.List;


final class Grid extends JPanel {

    private List<Point> fillCells;
    private List<Color> cellColor;
    private List<String> icons;
    private int colorListIndex;
    private int iconListIndex;
    private final Color borderColor = Color.WHITE;
    private static final int CELL_WIDTH = 160;
    private static final int CELL_HEIGHT = 60;
    private static final int NUMB_OF_COLUMNS = 20;
    private static final int NUMB_OF_ROWS = 7;
    private static final int GRID_WIDTH = NUMB_OF_COLUMNS * CELL_WIDTH;
    private static final int GRID_HEIGHT = NUMB_OF_ROWS * CELL_HEIGHT;
    public Grid() {
        fillCells = new ArrayList<>(25);
        cellColor = new ArrayList<>(25);
        icons = new ArrayList<>(25);

    }

    public void setFillCells(List<Point> fillCells) {
        this.fillCells = fillCells;
    }

    public void setCellColor(List<Color> cellColor) {
        this.cellColor = cellColor;
    }

    public void setIcons(List<String> icons) {
        this.icons = icons;
    }

    public List<Point> getFillCells() {
        return fillCells;
    }

    public List<Color> getCellColor() {
        return cellColor;
    }

    public List<String> getIcons() {
        return icons;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        colorListIndex = 0;
        iconListIndex = 0;
        for (Point fillCell : fillCells) {
            int cellX = (fillCell.x * CELL_WIDTH);
            int cellY = (fillCell.y * CELL_HEIGHT);

            g.setColor(cellColor.get(colorListIndex));
            g.fillRect(cellX + 1, cellY + 7, CELL_WIDTH - 2, CELL_HEIGHT - 14);
            g.fillRect(cellX + 7, cellY + 1, CELL_WIDTH - 14, CELL_HEIGHT - 2);

            g.fillOval(cellX + 1, cellY + 1, 10, 10);
            g.fillOval(cellX + CELL_WIDTH - 12, cellY + 1, 10, 10);
            g.fillOval(cellX + 1, cellY + CELL_HEIGHT - 12, 10, 10);
            g.fillOval(cellX + CELL_WIDTH - 12, cellY + CELL_HEIGHT - 12, 10, 10);


            //For the border
            g.setColor(borderColor);
            g.fillRect(cellX + 5, cellY + 5, CELL_WIDTH - 10, CELL_HEIGHT - 10);

            g.setColor(cellColor.get(colorListIndex));
            g.fillRect(cellX+6, cellY+6, CELL_WIDTH-12,CELL_HEIGHT-12);
            g.fillRect(cellX+15, cellY+3, CELL_WIDTH-30, CELL_HEIGHT-6);


            try {
                Image img = ImageIO.read(getClass().getResource(icons.get(iconListIndex)));
                g.drawImage(img, cellX + CELL_WIDTH/2 - img.getWidth(null)/2, cellY + 3 + CELL_HEIGHT/2 - img.getHeight(null)/2,50,50,null);
            } catch (IOException ex) {
                System.out.println("Icon Error");
            }

            iconListIndex += 1;
            colorListIndex += 1;
        }
        g.setColor(Color.LIGHT_GRAY);
        g.drawRect(0, 0, GRID_WIDTH, GRID_HEIGHT);

        for (int i = 0; i <= GRID_WIDTH; i += CELL_WIDTH) {
            g.drawLine(i, 0, i, GRID_HEIGHT);
        }

        for (int i = 0; i <= GRID_HEIGHT; i += CELL_HEIGHT) {
            g.drawLine(0, i, GRID_WIDTH, i);
        }
    }

    public void resetGrid(){
        fillCells = new ArrayList<>(25);
        cellColor = new ArrayList<>(25);
        icons = new ArrayList<>(25);

        repaint();
    }

    public void fillCell(int x, int y, Color c, String img){
        fillCells.add(new Point(x, y));
        cellColor.add(c);
        icons.add(img);
        repaint();
    }
}